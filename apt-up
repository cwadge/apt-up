#!/bin/bash
# shellcheck disable=SC2086

## VARIABLES ##
# Configuration file path
CONFIG_FILE="/etc/apt-up.conf"

# Default values (may be overridden by config file)
# Variables to export during update (space-separated list):
EXPORT_VARS="IGNORE_CC_MISMATCH=1"
# Defaults to GitLab kernel-firmware, which is upstream of kernel.org,
# but the kernel.org git is a more heavily scrutinized and conservative option:
# https://web.git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
FIRMWARE_GIT_URL="https://gitlab.com/kernel-firmware/linux-firmware.git"

# Feature toggles
ENABLE_FIRMWARE_UPDATE=true
ENABLE_SYSTEM_UPDATE=true
ENABLE_FLATPAK_UPDATE=true
ENABLE_KERNEL_CLEANUP=true
ENABLE_CACHE_CLEAN=true
ENABLE_HOOKS=true

# Operation mode
INTERACTIVE=true

# Resource management (only applicable to non-interactive mode)
NICE_LEVEL=10
USE_IONICE=true
IONICE_CLASS=2
IONICE_LEVEL=7

# Hooks directory
# NOTE: Errors executing scripts with 'critical' in the title are treated as fatal
HOOKS_DIR="/etc/apt-up.d"

# Logging
LOG_FILE="/var/log/apt-up.log"
ENABLE_LOGGING=false

## BINARIES ##
# Leave blank for auto-detection:
DPKGBIN=""
APTBIN=""
APTGETBIN=""
APTITUDEBIN=""
FLATPAKBIN=""
GITBIN=""

## FUNCTIONS ##
# Begin color handling functions #
export black='\033[0m'
export boldblack='\033[1;0m'
export red='\033[31m'
export boldred='\033[1;31m'
export green='\033[32m'
export boldgreen='\033[1;32m'
export yellow='\033[33m'
export boldyellow='\033[1;33m'
export blue='\033[34m'
export boldblue='\033[1;34m'
export magenta='\033[35m'
export boldmagenta='\033[1;35m'
export cyan='\033[36m'
export boldcyan='\033[1;36m'
export white='\033[37m'
export boldwhite='\033[1;37m'

cecho ()
{
	local default_msg=" "
	message=${1:-$default_msg}
	color=${2:-black}
	case $color in
		black) printf '%b' "$black" ;;
		boldblack) printf '%b' "$boldblack" ;;
		red) printf '%b' "$red" ;;
		boldred) printf '%b' "$boldred" ;;
		green) printf '%b' "$green" ;;
		boldgreen) printf '%b' "$boldgreen" ;;
		yellow) printf '%b' "$yellow" ;;
		boldyellow) printf '%b' "$boldyellow" ;;
		blue) printf '%b' "$blue" ;;
		boldblue) printf '%b' "$boldblue" ;;
		magenta) printf '%b' "$magenta" ;;
		boldmagenta) printf '%b' "$boldmagenta" ;;
		cyan) printf '%b' "$cyan" ;;
		boldcyan) printf '%b' "$boldcyan" ;;
		white) printf '%b' "$white" ;;
		boldwhite) printf '%b' "$boldwhite" ;;
	esac
	printf "%s\n" "$message"
	tput sgr0
	printf '%b' "$black"
	# Log to file if enabled
	if [ "$ENABLE_LOGGING" = "true" ]; then
		echo "[$(date '+%Y-%m-%d %H:%M:%S')] $message" >> "$LOG_FILE"
	fi
	return
}
# End color handling functions #

Error_Handler ()
{
	cecho "[FATAL] Script aborted while $CURRENT_STEP." boldred
	echo
	# Run failure hooks if enabled
	if [ "$ENABLE_HOOKS" = "true" ]; then
		Run_Hooks "fail"
	fi
	exit 1
}

Bypass_Handler ()
{
	: # Miss the error handler and continue silently
}

Warn_Handler ()
{
	cecho "[WARNING] Something unexpected happened while $CURRENT_STEP." boldyellow
	cecho "[INFO] Continuing anyway..." cyan
}

Set_BASH_Options ()
{
	CURRENT_STEP="setting BASH options"
	if [ -z "$BASH_VERSION" ]; then
		echo
		cecho "[WARNING] This script wasn't run in BASH (are you launching it with 'sh'?)" boldyellow
		cecho "          It may function, but certain error handling won't be as robust." boldyellow
		echo
		if [ "$INTERACTIVE" = "true" ]; then
			read -r -p "==> Continue anyway? [N/y] " REPLY
			case "$REPLY" in
				( [yY]|[yY][eE][sS] ) echo "" ;;
				*) echo ; Error_Handler ;;
			esac
		else
			cecho "[INFO] Running in non-interactive mode, continuing despite non-BASH shell." cyan
		fi
	else
		set -o pipefail
		trap 'Error_Handler' ERR
	fi
}

Show_Help() {
	cat << EOF
apt-up - Comprehensive update script for Debian-based systems

Usage: apt-up [OPTIONS]

Options:
  --no-interactive     Run without user interaction
  --no-firmware        Skip firmware updates
  --no-system-update   Skip system package updates
  --no-flatpak         Skip Flatpak updates
  --no-kernel-cleanup  Skip removal of old kernels
  --no-cache-clean     Skip cleaning package caches
  --install            Create configuration files and hook directories
  --help               Display this help message

For more information, see the configuration file at /etc/apt-up.conf
EOF
}

Parse_Arguments() {
	CURRENT_STEP="parsing command line arguments"
	for arg in "$@"; do
		case "$arg" in
			"--no-interactive") INTERACTIVE=false ;;
			"--no-firmware") ENABLE_FIRMWARE_UPDATE=false ;;
			"--no-system-update") ENABLE_SYSTEM_UPDATE=false ;;
			"--no-flatpak") ENABLE_FLATPAK_UPDATE=false ;;
			"--no-kernel-cleanup") ENABLE_KERNEL_CLEANUP=false ;;
			"--no-cache-clean") ENABLE_CACHE_CLEAN=false ;;
			"--install") Create_Config; Create_Hook_Dirs; exit 0 ;;
			"--help") Show_Help; exit 0 ;;
			*) cecho "[FATAL] Unknown argument: $arg" red ; Show_Help ; exit 1 ;;
		esac
	done
}

Load_Config() {
	CURRENT_STEP="loading configuration"
	if [ -f "$CONFIG_FILE" ]; then
		cecho "[INFO] Loading configuration from $CONFIG_FILE" cyan
		# shellcheck disable=SC1090
		source "$CONFIG_FILE"
	else
		cecho "[INFO] No configuration file found at $CONFIG_FILE, using defaults" cyan
	fi
}

Create_Config() {
	CURRENT_STEP="creating configuration file"
	cat > "/etc/apt-up.conf" << 'EOT'
## VARIABLES ##
# Variables to export during update (space-separated list):
EXPORT_VARS="IGNORE_CC_MISMATCH=1"
# Defaults to GitLab kernel-firmware, which is upstream of kernel.org,
# but the kernel.org git is a more heavily scrutinized and conservative option:
# https://web.git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
FIRMWARE_GIT_URL="https://gitlab.com/kernel-firmware/linux-firmware.git"

# Enable or disable specific features
ENABLE_FIRMWARE_UPDATE=true
ENABLE_SYSTEM_UPDATE=true
ENABLE_FLATPAK_UPDATE=true
ENABLE_KERNEL_CLEANUP=true
ENABLE_CACHE_CLEAN=true
ENABLE_HOOKS=true

# Logging settings
LOG_FILE="/var/log/apt-up.log"
ENABLE_LOGGING=false

# Resource management (only applicable to non-interactive mode)
NICE_LEVEL=10
USE_IONICE=true
IONICE_CLASS=2
IONICE_LEVEL=7
EOT
cecho "[INFO] initial configuration created at /etc/apt-up.conf" cyan
}

Create_Hook_Dirs() {
	CURRENT_STEP="creating hook directories"
	mkdir -p "${HOOKS_DIR}/pre.d" "${HOOKS_DIR}/post.d" "${HOOKS_DIR}/fail.d" || Error_Handler
	cecho "[INFO] Created hook directories at ${HOOKS_DIR}" cyan
	CURRENT_STEP="setting hook directory permissions"
	chmod 755 "${HOOKS_DIR}" "${HOOKS_DIR}/pre.d" "${HOOKS_DIR}/post.d" "${HOOKS_DIR}/fail.d" || Error_Handler
	# Create a sample hook
	CURRENT_STEP="populating sample hook"
	cat > "${HOOKS_DIR}/pre.d/00-example" << 'EOT' || Error_Handler
#!/bin/bash
# Example pre-update hook
# This is a sample pre-update hook.
# Normally you would do things here,
# we're just going to exit with 0 (success)
exit 0
EOT
CURRENT_STEP="setting permissions on sample hook"
chmod 755 "${HOOKS_DIR}/pre.d/00-example" || Error_Handler
cecho "[INFO] Sample hook created at ${HOOKS_DIR}/pre.d/00-example" cyan
}

Apply_Resource_Limits() {
	CURRENT_STEP="applying resource limits"
	if [ "$INTERACTIVE" = "false" ]; then
		cecho "[INFO] Setting CPU priority (nice level: $NICE_LEVEL)" cyan
		renice -n "$NICE_LEVEL" -p $$ >/dev/null 2>&1 || Warn_Handler
		if [ "$USE_IONICE" = "true" ]; then
			if command -v ionice >/dev/null 2>&1; then
				cecho "[INFO] Setting I/O priority (class: $IONICE_CLASS, level: $IONICE_LEVEL)" cyan
				ionice -c "$IONICE_CLASS" -n "$IONICE_LEVEL" -p $$ >/dev/null 2>&1 || Warn_Handler
			else
				cecho "[WARNING] ionice command not found, skipping I/O priority adjustment" boldyellow
			fi
		fi
	fi
}

Run_Hooks() {
	CURRENT_STEP="running user-defined hooks"
	local hook_type="$1"
	if [ "$ENABLE_HOOKS" != "true" ]; then
		return 0
	fi
	local hooks_path="${HOOKS_DIR}/${hook_type}.d"
	if [ ! -d "$hooks_path" ]; then
		return 0
	fi
	cecho "[INFO] Running $hook_type hooks" cyan
	# Find executable files and run them in alphabetical order
	find "$hooks_path" -type f -executable | sort | while read -r hook; do
	hook_name=$(basename "$hook")
	cecho "[INFO] Running hook: $hook_name" cyan
	"$hook"
	hook_status=$?  # Capture the hook's exit code immediately
	if [ "$hook_status" -ne 0 ]; then
		Warn_Handler
		if [[ "$hook_name" =~ ^[0-9][0-9]-critical- ]]; then
			cecho "[ERROR] Critical hook $hook_name failed with exit code $hook_status, aborting." red
			Error_Handler
		fi
	fi
done
}

Initialize_Logging() {
	if [ "$ENABLE_LOGGING" = "true" ]; then
		CURRENT_STEP="initializing logging"
		# Ensure log directory exists and is writable
		LOG_DIR=$(dirname "$LOG_FILE")
		if [ ! -d "$LOG_DIR" ]; then
			mkdir -p "$LOG_DIR" || {
				cecho "[WARNING] Could not create log directory $LOG_DIR, disabling logging" boldyellow
							ENABLE_LOGGING=false
							return
						}
		fi
		if [ ! -w "$LOG_DIR" ] || { [ -f "$LOG_FILE" ] && [ ! -w "$LOG_FILE" ]; }; then
			cecho "[WARNING] No write permission for $LOG_FILE, disabling logging" boldyellow
			ENABLE_LOGGING=false
			return
		fi
		# Add header to log file
		echo "==== apt-up run started at $(date) ====" >> "$LOG_FILE"
	fi
}

Detect_Bin_Paths ()
{
	CURRENT_STEP="detecting binary paths"
	if [ -z "$DPKGBIN" ]; then DPKGBIN="$(which dpkg)" || Warn_Handler; fi
	if [ -z "$APTITUDEBIN" ]; then APTITUDEBIN="$(which aptitude)" || Warn_Handler; fi
	if [ -z "$APTBIN" ]; then APTBIN="$(which apt)" || Warn_Handler; fi
	if [ -z "$APTGETBIN" ]; then APTGETBIN="$(which apt-get)" || Warn_Handler; fi
	if [ -z "$FLATPAKBIN" ]; then FLATPAKBIN="$(which flatpak)" || Warn_Handler; fi
	if [ -z "$GITBIN" ]; then GITBIN="$(which git)" || Warn_Handler; fi
}

Sanity_Check ()
{
	CURRENT_STEP="performing sanity check"
	WE_ARE_SANE=true
	if [ ! -f "$DPKGBIN" ]; then
		cecho "[ERROR] The dpkg binary ($DPKGBIN) doesn't seem to exist." red
		echo "        Is this really a Debian-based system?"
		WE_ARE_SANE=false
	fi
	if [ ! -f "$APTGETBIN" ]; then
		cecho "[ERROR] The apt-get binary ($APTGETBIN) doesn't seem to exist." red
		echo "        Is this really a Debian-based system?"
		WE_ARE_SANE=false
	fi
	if [ ! -f "$APTBIN" ]; then
		cecho "[WARNING] The apt binary ($APTBIN) doesn't seem to exist." boldyellow
	fi
	if [ ! -f "$FLATPAKBIN" ] && [ "$ENABLE_FLATPAK_UPDATE" = "true" ]; then
		cecho "[WARNING] The flatpak binary ($FLATPAKBIN) doesn't seem to exist." boldyellow
		cecho "[INFO] Flatpak updates will be skipped." cyan
		ENABLE_FLATPAK_UPDATE=false
	fi
	if [ ! -f "$APTITUDEBIN" ]; then
		cecho "[ERROR] The aptitude binary ($APTITUDEBIN) doesn't seem to exist." red
		if [ "$INTERACTIVE" = "true" ]; then
			echo "        Aptitude is required by this script. Install now? [N/y]"
			read -r -p "==> " REPLY
			case "$REPLY" in
				( [yY]|[yY][eE][sS] )
					Install_Aptitude
					APTITUDEBIN="$(which aptitude)"  # Update after install
					if [ ! -f "$APTITUDEBIN" ]; then
						cecho "[ERROR] Failed to locate aptitude binary after installation." red
						Error_Handler
					fi
					;;
				*) echo ; Error_Handler ;;
			esac
		else
			cecho "[INFO] Non-interactive mode: Installing aptitude automatically." cyan
			Install_Aptitude
			APTITUDEBIN="$(which aptitude)"  # Update after install
			if [ ! -f "$APTITUDEBIN" ]; then
				cecho "[ERROR] Failed to locate aptitude binary after installation." red
				Error_Handler
			fi
		fi
	fi
	if [ "$ENABLE_FIRMWARE_UPDATE" = "true" ] && [ ! -f "$GITBIN" ]; then
		cecho "[ERROR] The git binary ($GITBIN) doesn't seem to exist." red
		if [ "$INTERACTIVE" = "true" ]; then
			echo "        Git is required for firmware updates. Install now? [N/y]"
			read -r -p "==> " REPLY
			case "$REPLY" in
				( [yY]|[yY][eE][sS] )
					( $APTITUDEBIN update && $APTITUDEBIN -y install git ) || Error_Handler
					GITBIN="$(which git)"  # Update after install
					if [ ! -f "$GITBIN" ]; then
						cecho "[ERROR] Failed to locate git binary after installation." red
						Error_Handler
					fi
					;;
				*)
					if [ "$INTERACTIVE" = "true" ]; then
						echo
						Error_Handler
					else
						cecho "[INFO] Disabling firmware updates due to missing git." cyan
						ENABLE_FIRMWARE_UPDATE=false
					fi
					;;
			esac
		else
			cecho "[INFO] Non-interactive mode: Installing git automatically." cyan
			( $APTITUDEBIN update && $APTITUDEBIN -y install git ) || {
				cecho "[WARNING] Failed to install git, disabling firmware updates." boldyellow
							ENABLE_FIRMWARE_UPDATE=false
						}
						if [ "$ENABLE_FIRMWARE_UPDATE" = "true" ]; then
							GITBIN="$(which git)"  # Update after install
							if [ ! -f "$GITBIN" ]; then
								cecho "[ERROR] Failed to locate git binary after installation." red
								ENABLE_FIRMWARE_UPDATE=false
							fi
						fi
		fi
	fi
	if [ "$WE_ARE_SANE" = "false" ]; then
		Error_Handler
	fi
}

Install_Aptitude ()
{
	CURRENT_STEP="installing aptitude"
	$APTGETBIN update || Error_Handler
	$APTGETBIN -y install aptitude || Error_Handler
}

Update_Firmware ()
{
	CURRENT_STEP="updating firmware from linux-firmware"
	FIRMWARE_DIR="/var/cache/linux-firmware"
	# Sanity check on firmware directory
	if [ -e "$FIRMWARE_DIR" ] && [ ! -d "$FIRMWARE_DIR" ]; then
		cecho "[ERROR] $FIRMWARE_DIR exists but is not a directory." red
		Error_Handler
	elif [ -d "$FIRMWARE_DIR" ] && [ ! -w "$FIRMWARE_DIR" ]; then
		cecho "[ERROR] $FIRMWARE_DIR is not writable. Run as root or fix permissions." red
		Error_Handler
	fi
	OLD_HASH=""
	if [ -d "$FIRMWARE_DIR" ]; then
		cecho "[INFO] Checking for firmware updates..." cyan
		cd "$FIRMWARE_DIR" || Error_Handler
		OLD_HASH=$($GITBIN rev-parse HEAD)
		$GITBIN fetch --depth 1 origin main || Warn_Handler
		$GITBIN reset --hard origin/main || Warn_Handler
	else
		cecho "[INFO] Cloning linux-firmware repository from $FIRMWARE_GIT_URL..." cyan
		$GITBIN clone --depth 1 "$FIRMWARE_GIT_URL" "$FIRMWARE_DIR" || Error_Handler
		cd "$FIRMWARE_DIR" || Error_Handler
	fi
	NEW_HASH=$($GITBIN rev-parse HEAD)
	if [ "$OLD_HASH" != "$NEW_HASH" ]; then
		cecho "[INFO] New firmware detected, preparing installation..." cyan
		# Preemptively clear all destinations from WHENCE (files and symlinks)
		cecho "[INFO] Scanning for potential conflicts in /lib/firmware..." cyan
		TEMP_ENTRIES=$(mktemp)
		# Extract File and RawFile entries, unescaping spaces
		grep -E '^(RawFile|File):' WHENCE | sed -E -e 's/^(RawFile|File):[[:space:]]*"(.+)"/\2/' | sed 's/\\//g' > "$TEMP_ENTRIES"
		# Append Link entries (just the link part), unescaping spaces
		grep -E '^Link:' WHENCE | sed -E -e 's/^Link:[[:space:]]+([^[:space:]].*[^[:space:]])[[:space:]]+->.*/\1/' | sed 's/\\//g' >> "$TEMP_ENTRIES"
		ENTRY_COUNT=0
		while read -r entry; do
			DEST_PATH="/lib/firmware/$entry"
			if [ -e "$DEST_PATH" ]; then
				rm -f "$DEST_PATH" || Warn_Handler
				ENTRY_COUNT=$((ENTRY_COUNT + 1))
			fi
		done < "$TEMP_ENTRIES"
		rm -f "$TEMP_ENTRIES"
		if [ "$ENTRY_COUNT" -gt 0 ]; then
			cecho "[INFO] Cleared $ENTRY_COUNT existing firmware entries in /lib/firmware." cyan
		fi
		# Quietly remove any broken symlinks with a count
		BROKEN_SYMLINKS=$(find /lib/firmware -xtype l -print)
		BROKEN_COUNT=0
		if [ -n "$BROKEN_SYMLINKS" ]; then
			cecho "[INFO] Cleaning up broken symlinks in /lib/firmware..." cyan
			echo "$BROKEN_SYMLINKS" | while read -r link; do
			rm -f "$link" || Warn_Handler
			BROKEN_COUNT=$((BROKEN_COUNT + 1))
		done
		if [ "$BROKEN_COUNT" -gt 0 ]; then
			cecho "[INFO] Removed $BROKEN_COUNT broken symlinks." cyan
		fi
		fi
		# Run the firmware update
		cecho "[INFO] Installing firmware..." cyan
		./copy-firmware.sh /lib/firmware || Error_Handler
		CURRENT_STEP="updating initramfs for new firmware"
		cecho "[INFO] Updating initramfs..." cyan
		update-initramfs -k all -u 2>/dev/null || Error_Handler
	else
		cecho "[INFO] Firmware already up to date." cyan
	fi
}

Kernel_Cleanup() {
	CURRENT_STEP="removing unneeded kernels and headers"
	# Get all kernel and header packages in a single dpkg call
	KERNEL_PACKAGES=$($DPKGBIN --list | awk '/^(ii|ri)  linux-(image|headers)/ { print $2 }') || Bypass_Handler
	# Current running kernel version
	CURRENT_KERNEL=$(uname -r)
	# Initialize variables for previous versions
	PREVIOUS_KERNEL=""
	PREVIOUS_HEADERS=""
	# Process each package to find the previous versions
	PREVIOUS_KERNEL=$(echo "$KERNEL_PACKAGES" | grep "linux-image" | grep -v "$CURRENT_KERNEL" | sort -V | tail -n 1) || true
	PREVIOUS_HEADERS=$(echo "$KERNEL_PACKAGES" | grep "linux-headers" | grep -v "$CURRENT_KERNEL" | sort -V | tail -n 1) || true
	# Build list of packages to remove
	PACKAGES_TO_REMOVE=$(echo "$KERNEL_PACKAGES" | grep -v "$CURRENT_KERNEL" | grep -v "$PREVIOUS_KERNEL" | grep -v "$PREVIOUS_HEADERS" | tr '\n' ' ' | sed 's/ *$//') || true
	if [ -n "$PACKAGES_TO_REMOVE" ]; then
		cecho "[INFO] Found some old kernels and headers to remove." cyan
		if [ "$INTERACTIVE" = "true" ]; then
			$APTITUDEBIN purge $PACKAGES_TO_REMOVE || Warn_Handler
		else
			$APTITUDEBIN -y purge $PACKAGES_TO_REMOVE || Warn_Handler
		fi
	else
		cecho "[INFO] No old kernels or headers to remove." cyan
	fi
}

## EXECUTION ##
Set_BASH_Options
Parse_Arguments "$@"
Load_Config
Initialize_Logging
Detect_Bin_Paths
Sanity_Check
Apply_Resource_Limits

# Set apt options based on interactive mode
if [ "$INTERACTIVE" = "false" ]; then
	APT_OPTS="-y"
else
	APT_OPTS=""
fi

# Run pre-update hooks
Run_Hooks "pre"

cecho " ________________________________ " boldblue
cecho "/ Exporting global variables...  \ " boldblue
cecho "\________________________________/ " boldblue
CURRENT_STEP="exporting global variables"
for CURRENT_EXPORT in ${EXPORT_VARS}; do
	cecho "[INFO] Exporting: ${CURRENT_EXPORT}" cyan
	export "${CURRENT_EXPORT?}"
done

if [ "$ENABLE_FIRMWARE_UPDATE" = "true" ]; then
	cecho " ________________________________ " boldblue
	cecho "/ Updating kernel firmware...    \ " boldblue
	cecho "\________________________________/ " boldblue
	Update_Firmware
else
	cecho " ________________________________ " boldblue
	cecho "/ Skipping firmware updates...   \ " boldblue
	cecho "\________________________________/ " boldblue
	cecho "[INFO] Firmware updates disabled." cyan
fi

if [ "$ENABLE_SYSTEM_UPDATE" = "true" ]; then
	cecho " ________________________________ " boldblue
	cecho "/ Checking for updated files...  \ " boldblue
	cecho "\________________________________/ " boldblue
	CURRENT_STEP="checking for updated packages"
	$APTITUDEBIN update || Warn_Handler
	cecho " ________________________________ " boldblue
	cecho "/ Updating files if necessary... \ " boldblue
	cecho "\________________________________/ " boldblue
	CURRENT_STEP="updating the system"
	$APTITUDEBIN $APT_OPTS full-upgrade || Warn_Handler
else
	cecho " ________________________________ " boldblue
	cecho "/ Skipping system update...      \ " boldblue
	cecho "\________________________________/ " boldblue
	cecho "[INFO] System update disabled." cyan
fi

if [ "$ENABLE_FLATPAK_UPDATE" = "true" ] && [ -f "$FLATPAKBIN" ]; then
	cecho " ________________________________ " boldblue
	cecho "/ Updating flatpak packages...   \ " boldblue
	cecho "\________________________________/ " boldblue
	CURRENT_STEP="updating flatpaks"
	if [ "$INTERACTIVE" = "false" ]; then
		$FLATPAKBIN update -y || Warn_Handler
	else
		$FLATPAKBIN update || Warn_Handler
	fi
else
	cecho " ________________________________ " boldblue
	cecho "/ Skipping flatpak updates...    \ " boldblue
	cecho "\________________________________/ " boldblue
	cecho "[INFO] Flatpak updates disabled or flatpak not installed." cyan
fi

if [ "$ENABLE_CACHE_CLEAN" = "true" ]; then
	cecho " ________________________________ " boldblue
	cecho "/ Cleaning out the apt cache...  \ " boldblue
	cecho "\________________________________/ " boldblue
	CURRENT_STEP="cleaning apt cache"
	$APTBIN clean || Warn_Handler
	CURRENT_STEP="cleaning apt-get cache"
	$APTGETBIN clean || Warn_Handler
	CURRENT_STEP="cleaning aptitude cache"
	$APTITUDEBIN clean || Warn_Handler
	cecho "[INFO] Finished cleaning cache." cyan
else
	cecho " ________________________________ " boldblue
	cecho "/ Skipping cache cleaning...     \ " boldblue
	cecho "\________________________________/ " boldblue
	cecho "[INFO] Cache cleaning disabled." cyan
fi

if [ "$ENABLE_KERNEL_CLEANUP" = "true" ]; then
	cecho " ________________________________ " boldblue
	cecho "/ Purge old kernels & headers... \ " boldblue
	cecho "\________________________________/ " boldblue
	Kernel_Cleanup
else
	cecho " ________________________________ " boldblue
	cecho "/ Skipping kernel cleanup...     \ " boldblue
	cecho "\________________________________/ " boldblue
	cecho "[INFO] Kernel cleanup disabled." cyan
fi

cecho " ________________________________ " boldblue
cecho "/ Syncing buffers out to disk... \ " boldblue
cecho "\________________________________/ " boldblue
CURRENT_STEP="syncing writes out to disk"
# 60s should be plenty for slow or busy machines
timeout 60s sync || Warn_Handler
cecho "[INFO] Synced." cyan

# Run post-update hooks
Run_Hooks "post"

# Close log file if enabled
if [ "$ENABLE_LOGGING" = "true" ]; then
	echo "==== apt-up run completed at $(date) ====" >> "$LOG_FILE"
fi

cecho " ________________________________ " boldblue
cecho "/           Finished.            \ " boldblue
cecho "\________________________________/ " boldblue
